name: Release

# on:
#   push:
#     branches:
#       - main  # 只在推送到 main 分支时触发

on:
  workflow_dispatch: # 支持手动触发并传递参数
    inputs:
      secret_key:
        description: Enter your secret key to trigger release
        required: true

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write # 允许创建 GitHub Releases
      packages: write # 允许发布 npm 包

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 设置 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 安装和激活 pnpm
      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.9.0 --activate

      # 临时修改 npm registry 配置
      - name: Override registry in .npmrc
        run: echo "registry=https://registry.npmjs.org" > ~/.npmrc

      # 校验输入的 secret key 是否匹配
      - name: Validate secret key
        run: |
          if [[ "${{ github.event.inputs.secret_key }}" != "${{ secrets.MY_SECRET_KEY }}" ]]; then
            echo "Invalid secret key. Exiting."
            exit 1
          fi
          echo "Secret key validated."

      # 使用缓存加速 pnpm 依赖安装
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 只安装 changesets 相关工具
      - name: Install changesets
        run: pnpm install --frozen-lockfile

      # 配置 Git 用户信息
      - name: Setup Git user info
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

      # 打包受影响的包并发布
      - name: build and publish for affected packages
        run: pnpm ci:publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Rebase 临时分支到 main，并推送
      - name: Rebase temp branch onto main and push changes
        run: |
          git fetch origin
          git checkout temp-release-branch
          if ! git rebase origin/main; then
            echo "Rebase failed due to conflicts."
            exit 1
          fi
          git checkout main
          git merge temp-release-branch
          git push origin main
          git branch -d temp-release-branch
          git push origin --delete temp-release-branch

      # 创建 GitHub Release
      - name: Create GitHub Release
        uses: changesets/action@v1
        with:
          version: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
